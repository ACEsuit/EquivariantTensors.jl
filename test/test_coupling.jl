using Test, RepLieGroups, StaticArrays, SpheriCart, Combinatorics
using RepLieGroups.O3: Ctran, re_rpe, rpe_basis_new, gram
using PartialWaveFunctions: clebschgordan
using LinearAlgebra
using WignerD, Rotations, BlockDiagonals

isdefined(Main, :___UTILS_FOR_TESTS___) || include("utils/utils_for_tests.jl")


##

@info("Equivariance and Linear Independence of coupled cSH & rSH based basis")
Lmax = 3
for L = 0:Lmax 
   local θ, ll, Ure, Ure_r, U_rpe, U_rpe_r, Mll, Mll_r 
   local X, Q, B1, B2, B3, B4, B5, B6, B7, B8
   local rk, rk_r, ntest
   local BB, BB_r, BB_sym, BB_sym_r

   # generate an nnll list for each L for testing
   lmax = 4
   nmax = 4
   ORDmax = 5
   nnll_list = [] 

   for ORD = 2:ORDmax
      for ll in with_replacement_combinations(1:lmax, ORD) 
         # 0 or 1 above ?
         if !iseven(sum(ll)+L); continue; end  # This is to ensure the reflection symmetry
         if sum(ll) > 2 * lmax; continue; end 
         for Inn in CartesianIndices( ntuple(_->1:nmax, ORD) )
            nn = [ Inn.I[α] for α = 1:ORD ]
            if sum(nn) > sum(1:nmax); continue; end
            nnll = [ (ll[α], nn[α]) for α = 1:ORD ]
            if !issorted(nnll); continue; end
            push!(nnll_list, (SVector(nn...), SVector(ll...)))
         end
      end
   end

   long_nnll_list = nnll_list 
   short_nnll_list = nnll_list[1:10:end]
   ultra_short_nnll_list = nnll_list[1:100:end]

   verbose = true 

   @info("Using ultra short nnll list for testing the case L = $L")
   nnll_list = ultra_short_nnll_list

   for (itest, (nn, ll)) in enumerate(nnll_list)
      # @show nn, ll
      N = length(ll)
      @assert length(ll) == length(nn)

      Ure, _, _, Mll = re_rpe(nn, ll, L) # cSH based re_basis
      Ure_r, _, _, Mll_r = re_rpe(nn, ll, L; flag = :SpheriCart) # rSH based re_basis
      Urpe, Mll = rpe_basis_new(nn, ll, L) # cSH based rpe_basis
      Urpe_r, Mll_r = rpe_basis_new(nn, ll, L; flag = :SpheriCart) # rSH based rpe_basis

      rk = rank(gram(Urpe), rtol = 1e-12)
      rk_r = rank(gram(Urpe_r), rtol = 1e-12)
      
      # Check that the two rpe bases, generated by rSH and cSH, have the same 
      # dimensionality
      print_tf(@test rk == rk_r)
      # NOTE: re_basis and rpe_basis share the same Mll / Mll_r

      # This would mean that both the bases are empty; 
      if norm(Ure) == norm(Ure_r) == 0 ; continue; end 
      # Check that the Ure and Ure_r basis span the spaces that have the 
      # same dimension, and the dimensionality is the same as the size of Ure 
      # and Ure_r (full rank)
      print_tf(@test ( size(Ure, 1) == size(Ure_r, 1) 
                       == rank(gram(Ure), rtol = 1e-12) 
                       == rank(gram(Ure_r), rtol = 1e-12) ) )

      X = [ rand_sphere() for i in 1:length(ll) ]
      θ = rand(3) * 2pi
      Q = RotZYZ(θ...)
      B1 = eval_basis(ll, Ure, Mll, X; Real = false)
      B2 = eval_basis(ll, Ure, Mll, Ref(Q) .* X; Real = false)
      B3 = eval_basis(ll, Ure_r, Mll_r, X; Real = true)
      B4 = eval_basis(ll, Ure_r, Mll_r, Ref(Q) .* X; Real = true)
      B5 = eval_basis(ll, Urpe, Mll, X; Real = false)
      B6 = eval_basis(ll, Urpe, Mll, Ref(Q) .* X; Real = false)
      B7 = eval_basis(ll, Urpe_r, Mll_r, X; Real = true)
      B8 = eval_basis(ll, Urpe_r, Mll_r, Ref(Q) .* X; Real = true)

      # Check the equivariance of the basis
      # TODO: combine into a single test 
      if L == 0
         print_tf(@test norm(B1 - B2) < 1e-12)
         print_tf(@test norm(B3 - B4) < 1e-12)
         print_tf(@test norm(B5 - B6) < 1e-12)
         print_tf(@test norm(B7 - B8) < 1e-12)
      else
         D = transpose(WignerD.wignerD(L, θ...))
         D_r = Ctran(L) * D * Ctran(L)'
         print_tf(@test norm(B1 - Ref(D) .* B2)   < 1e-12)
         print_tf(@test norm(B3 - Ref(D_r) .* B4) < 1e-12)
         print_tf(@test norm(B5 - Ref(D) .* B6)   < 1e-12)
         print_tf(@test norm(B7 - Ref(D_r) .* B8) < 1e-12)
      end

      # @info("Check the linear independence of the basis")
      ntest = 1000

      Xs = make_batch(ntest, length(ll))
      BB = rand_batch(; coeffs=Urpe, MM=Mll, ll=ll, nn=nn, batch = Xs, Real = false)
      print_tf(@test rank(gram(BB); rtol=1e-12) == size(BB,1) == rk)
      BB_r = rand_batch(; coeffs=Urpe_r, MM=Mll_r, ll=ll, nn=nn, batch = Xs, Real = true)
      print_tf(@test rank(gram(BB_r); rtol=1e-12) == size(BB_r,1) == rk_r)

      BB_sym = sym_rand_batch(; coeffs=Urpe, MM=Mll, ll=ll, nn=nn, batch = Xs, Real = false)
      print_tf(@test rank(gram(BB_sym); rtol=1e-12) == size(BB_sym,1) == rk)
      BB_sym_r = sym_rand_batch(; coeffs=Urpe_r, MM=Mll_r, ll=ll, nn=nn, batch = Xs, Real = true)
      print_tf(@test rank(gram(BB_sym_r); rtol=1e-12) == size(BB_sym_r,1) == rk_r)

   end
   println()
end
